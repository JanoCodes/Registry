- statuses_link ||= false
- version ||= false
- domain ||= false
- pending_user ||= false

- if domain.present?
  - if version # normal history
    - children       = HashWithIndifferentAccess.new(version.children)
    - nameservers    = Nameserver.all_versions_for(children[:nameservers], version.created_at)
    - tech_contacts  = Contact.all_versions_for(children[:tech_contacts], version.created_at)
    - admin_contacts = Contact.all_versions_for(children[:admin_contacts], version.created_at)
    - registrant     = Contact.all_versions_for(children[:registrant], version.created_at)
    - event          = version.event
    - creator        = plain_username(version.terminator)
  - else # pending history
    - nameservers    = domain.nameservers
    - tech_contacts  = domain.tech_contacts
    - admin_contacts = domain.admin_contacts
    - registrant     = [domain.registrant]
    - creator        = pending_user.try(:username)
    - event         = 'pending'

  %td
    %p.nowrap
      = l(domain.updated_at, format: :shorts)
      - if statuses_link
        %br= link_to t(:edit_statuses), edit_admin_domain_path(params[:domain_id])

    %p.text-right
      = event
      %br
      = creator

  %td
    %p
      - if domain.statuses.present?
        - domain.statuses.each do |s|
          = s
          - if domain.status_notes.present?
            - notes = domain.status_notes[s]
            - if notes
              %br
              %i= notes
            %br
    - if domain.pending_json.present?
      %p
        = link_to t(:pending_epp), '#', class: 'js-pending-toggle'

  %td
    %p
      = "#{domain.period}#{domain.period_unit}"
      %br
      = "#{l(domain.valid_from, format: :date)}"
      %br
      = "#{l(domain.valid_to, format: :date)}"

  %td
    - Array(registrant).each do |r|
      %p
        = r[:name]
        = r[:phone]
        = r[:email]
      %p
        = r[:code]

  %td
    - Array(admin_contacts).each do |ac|
      %p
        = ac[:name]
        = ac[:phone]
        = ac[:email]
      %p
        = ac[:code]

  %td
    - Array(tech_contacts).each do |tc|
      %p
        = tc[:name]
        = tc[:phone]
        = tc[:email]
      %p
        = tc[:code]

  %td
    %p
      - Array(nameservers).each do |ns|
        = ns[:hostname]
        %br
        = ns[:ipv4].presence
        = ns[:ipv6].presence
        %br

  %td
    %p
      = domain.registrar.name if domain.registrar

  - if domain.pending_json.present?
    %tr.js-pending{ style: 'display: none;' }
      %td{colspan: 8}
        = preserve do
          %pre
            - formatted_req = Nokogiri::XML(domain.pending_json['frame'])
            - if formatted_req.errors.none?
              = formatted_req
            - else
              = domain.pending_json['frame']
